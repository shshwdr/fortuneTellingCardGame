using System.Collections.Generic;
using System.Linq;
using Naninovel.ManagedText;

namespace Naninovel
{
    /// <summary>
    /// Parses script localization documents generated by <see cref="ScriptLocalizer"/>.
    /// </summary>
    public class ScriptLocalizationParser
    {
        /// <summary>
        /// Parse options.
        /// </summary>
        public class Options
        {
            /// <summary>
            /// Text character to join composite parts of the localized content, such as parts of generic text lines.
            /// </summary>
            public char Separator { get; set; } = '|';
        }

        private static readonly MultilineManagedTextParser multilineParser = new();
        private readonly List<ManagedTextRecord> records = new();
        private readonly List<string> splitKeys = new();
        private readonly List<string> splitValues = new();
        private readonly List<string> splitComments = new();
        private readonly TextSplitter splitter;
        private readonly Options options;

        public ScriptLocalizationParser (Options options = null)
        {
            this.options = options ?? new Options();
            splitter = new(this.options.Separator);
        }

        /// <summary>
        /// Parses specified serialized text of a script localization managed text document.
        /// </summary>
        public ManagedTextDocument Parse (string text)
        {
            records.Clear();
            var doc = multilineParser.Parse(text);
            foreach (var record in doc.Records)
                if (!record.Key.Contains(options.Separator)) records.Add(record);
                else records.AddRange(SplitScriptRecord(record));
            return new(records, doc.Header);
        }

        private ManagedTextRecord[] SplitScriptRecord (ManagedTextRecord record)
        {
            splitKeys.Clear();
            splitValues.Clear();
            splitComments.Clear();
            splitter.Split(record.Key, splitKeys);
            if (!string.IsNullOrEmpty(record.Value))
                splitter.Split(record.Value, splitValues);
            if (!string.IsNullOrEmpty(record.Comment))
                splitter.Split(record.Comment, splitComments);
            var split = new ManagedTextRecord[splitKeys.Count];
            for (int i = 0; i < split.Length; i++)
                split[i] = new(splitKeys[i],
                    splitValues.ElementAtOrDefault(i),
                    splitComments.ElementAtOrDefault(i));
            return split;
        }
    }
}
